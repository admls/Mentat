created: 20190130010029762
modified: 20190130120512028
tags: unfinished tampered
title: $:/plugins/admls/mentat/lib/mentat.js
type: application/javascript

/*\
title: $:/plugins/admls/mentat/lib/mentat.js
type: application/javascript
module-type: library

Description...

\*/

(function(elmnt){

/*jslint node: true, browser: true */
/*global $tw: false */
"use strict";
    
function Window() {

}

    // For assigning z-indices. I'm not sure it should go here.
const zstack = []; 

Window.prototype.getDimensions = function(elmnt) {
	const title = elmnt.dataset.tiddlerTitle;
	// Check that elmnt is a tiddler
    if(!title) {
    	return;
    }
	return = $tw.utils.getBoundingPageRect(elmnt);
}

Window.prototype.logDimensions = function(elmnt) {
	const title = elmnt.dataset.tiddlerTitle;
	// Check that elmnt is a tiddler
    if(!title) {
    	return;
    }
    // Replace getDimensions with the computed dimensions
    const dimensions = this.getDimensions(elmnt);
	Object.keys(dimensions).forEach(function(key) {
    	$tw.wiki.setText(title,key,undefined,dimensions[key],undefined);
    }
}

Window.prototype.dragMouseDown = function(e) {
	const elmnt = e.target;
    // The dragging won't occur if the click is on some other element than the tagged tiddler, either within or without.
    if (!elmnt.dataset.tags.includes("testingStyle") {
      return;
    }
    // get the mouse cursor position at startup:
    pos3 = e.clientX;
    pos4 = e.clientY;
    // call a function whenever the cursor moves:
    window.addEventListener('mousemove', this.elementDrag, false);
    window.addEventListener('mouseup', this.closeDragElement, false);
}

Window.prototype.elementDrag = function(e) {
    e = e || window.event;
    const elmnt = e.target;
    const title = elmnt.dataset.tiddlerTitle;
    e.preventDefault();
    // calculate the new cursor position:
    pos1 = pos3 - e.clientX;
    pos2 = pos4 - e.clientY;
    pos3 = e.clientX;
    pos4 = e.clientY;
    // get dimensions
    const {top, left} = this.getDimensions(elmnt);
    // set the element's new position: prevent them from
    // running off the window (assumes fixed position)
    if (elmnt.style.position = "fixed") {
    if (elmnt.offsetTop - pos2 >= 0 && window.innerHeight >= elmnt.offsetTop - pos2 + elmnt.offsetHeight) {
    	$tw.wiki.setText(title,top,undefined,(top - pos2),undefined);
    };
    if (elmnt.offsetLeft - pos1 >= 0 && window.innerWidth >= elmnt.offsetLeft - pos1 + elmnt.offsetWidth) {
    	$tw.wiki.setText(title,left,undefined,(left - pos1),undefined);
    };
    } else {
    	$tw.wiki.setText(title,top,undefined,(top - pos2),undefined);
        $tw.wiki.setText(title,left,undefined,(left - pos1),undefined);
    }
}

Window.prototype.closeDragElement = function() {
    // stop moving when mouse button is released:
    window.removeEventListener('mousemove', this.elementDrag, false);
    window.removeEventListener('mouseup', this.closeDragElement, false);
}





  
  logDimensions();
  getSize();
  getPosition();
  elmnt.addEventListener("mousedown", dragMouseDown, false);
  elmnt.addEventListener("mousedown", zPosition, false);
  let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;
  
  function remove(array, element) {
    const index = array.indexOf(element);
    if (index !== -1) {
      array.splice(index, 1);
    }
  }
  
  function zPosition(e) {
    // Removes element from stack and then adds it to the end.
    remove(zstack, elmnt);
    zstack.push(elmnt);
    // Assigns z-index to the elements in zstack based on position.
    for (let i = 0; i < zstack.length; i++) {
      zstack[i].style.zIndex = i * 10;
    }
  }
  
  const resizer = elmnt.querySelector(".resizer");
  resizer.addEventListener('mousedown', initResize, false);

  function initResize(e) {
     window.addEventListener('mousemove', Resize, false);
     window.addEventListener('mouseup', stopResize, false);
  }
  function Resize(e) {
    getSize();
     elmnt.style.width = (e.clientX - elmnt.offsetLeft) + 'px';
     elmnt.style.height = (e.clientY - elmnt.offsetTop) + 'px';
     logDimensions();
  }
  function stopResize(e) {
    window.removeEventListener('mousemove', Resize, false);
    window.removeEventListener('mouseup', stopResize, false);
  }

  });
\*/
