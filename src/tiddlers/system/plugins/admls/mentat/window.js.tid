created: 20190128235608769
modified: 20190129101327551
tags: unfinished tampered
title: $:/plugins/admls/mentat/window.js
type: application/javascript

/*\
title: $:/plugins/admls/mentant/window.js
type: application/javascript
module-type: widget

tiddlers tagged 'Window' can be dragged and resized
like browser windows

\*/
(function () {

"use strict";
/*jslint node: true, browser: true */
/*global $tw: false */

var Widget = require("$:/core/modules/widgets/widget.js").widget;

var WindowWidget = function(parseTreeNode,options) {
    this.initialise(parseTreeNode,options);
};

/*
Inherit from the base widget class
*/
WindowWidget.prototype = new Widget();

/*
Render this widget into the DOM
*/
WindowWidget.prototype.render = function(parent,nextSibling) {
    var self = this;
    var parentDomNode = parent;

    // Compute attributes and execute state
    this.computeAttributes();
    this.execute();

const zstack = []; // For assigning z-indices.

document.addEventListener("mousedown", function(e) {
	
  let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;
    
    if (!e.target.className.includes("tc-tagged-Window")) {
      return;
  }
    
  let elmnt = e.target;
  dragMouseDown(e);
  zPosition(e);
  
  function remove(array, element) {
    const index = array.indexOf(element);
    if (index !== -1) {
      array.splice(index, 1);
    }
  }
  
  function zPosition(e) {
    // Removes element from stack and then adds it to the end.
    remove(zstack, elmnt);
    zstack.push(elmnt);
    // Assigns z-index to the elements in zstack based on position.
    for (let i = 0; i < zstack.length; i++) {
      zstack[i].style.zIndex = i * 10;
    }
  }
  
  function dragMouseDown(e) {
    // The dragging won't occur if the click is on some other element within window.
    if (!e.target.className.includes("tc-tagged-Window")) {
      return;
    }
    // get the mouse cursor position at startup:
    pos3 = e.clientX;
    pos4 = e.clientY;
    // call a function whenever the cursor moves:
    window.addEventListener('mousemove', elementDrag, false);
    window.addEventListener('mouseup', closeDragElement, false);
  }
    
  function elementDrag(e) {
    e = e || window.event;
    e.preventDefault();
    // calculate the new cursor position:
    pos1 = pos3 - e.clientX;
    pos2 = pos4 - e.clientY;
    pos3 = e.clientX;
    pos4 = e.clientY;
    // set the element's new position: prevent them from
    // running of the window (assumes fixed)
    if (elmnt.style.position = "fixed") {
    if (elmnt.offsetTop - pos2 >= 0 && window.innerHeight >= elmnt.offsetTop - pos2 + elmnt.offsetHeight) {
      elmnt.style.top = (elmnt.offsetTop - pos2) + "px";
    };
    if (elmnt.offsetLeft - pos1 >= 0 && window.innerWidth >= elmnt.offsetLeft - pos1 + elmnt.offsetWidth) {
    elmnt.style.left = (elmnt.offsetLeft - pos1) + "px";
    };
    } else {
      elmnt.style.top = (elmnt.offsetTop - pos2) + "px";
      elmnt.style.left = (elmnt.offsetLeft - pos1) + "px";
    }
    logDimensions();
  }

  function closeDragElement() {
    // stop moving when mouse button is released:
    window.removeEventListener('mousemove', elementDrag, false);
    window.removeEventListener('mouseup', closeDragElement, false);
  }
  
  }, false);
})();